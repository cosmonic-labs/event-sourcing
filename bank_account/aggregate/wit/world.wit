package cosmonic:eventsourcing@0.0.1;

interface types {
    resource event;
    resource command;
    resource state;
}

interface event-store {
    use types.{event};

    get-events: func(aggregate-id: string) -> list<event>;
    append: func(aggregate-id: string, events: list<event>);
}

interface aggregate {
    use types.{event, command, state};

    serialize: func(event: list<event>) -> list<u8>;
    deserialize: func(event: list<u8>) -> list<event>;

    rehydrate: func(events: list<event>) -> state;
    handle: func(state: state, command: command) -> list<event>;
}

world aggregate-w {
    import event-store;
    // The aggregate is responsible for defining the types
    export types;
    export aggregate;
}

world event-store-w {
    import types;
    import aggregate;
    export event-store;
}